// This file is auto-generated by @hey-api/openapi-ts

export type PostApiV1AuthLoginData = {
    body: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/auth/login";
};

export type PostApiV1AuthLoginErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1AuthLoginError =
    PostApiV1AuthLoginErrors[keyof PostApiV1AuthLoginErrors];

export type PostApiV1AuthLoginResponses = {
    200: {
        message: string;
    };
};

export type PostApiV1AuthLoginResponse =
    PostApiV1AuthLoginResponses[keyof PostApiV1AuthLoginResponses];

export type GetApiV1AuthGoogleData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/auth/google";
};

export type GetApiV1AuthGoogleErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1AuthGoogleError =
    GetApiV1AuthGoogleErrors[keyof GetApiV1AuthGoogleErrors];

export type PostApiV1AuthGoogleCallbackData = {
    body: {
        code: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/auth/google/callback";
};

export type PostApiV1AuthGoogleCallbackErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1AuthGoogleCallbackError =
    PostApiV1AuthGoogleCallbackErrors[keyof PostApiV1AuthGoogleCallbackErrors];

export type PostApiV1AuthGoogleCallbackResponses = {
    200: {
        message: string;
    };
    201: {
        message: string;
    };
};

export type PostApiV1AuthGoogleCallbackResponse =
    PostApiV1AuthGoogleCallbackResponses[keyof PostApiV1AuthGoogleCallbackResponses];

export type PostApiV1AuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/auth/logout";
};

export type PostApiV1AuthLogoutErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1AuthLogoutError =
    PostApiV1AuthLogoutErrors[keyof PostApiV1AuthLogoutErrors];

export type PostApiV1AuthLogoutResponses = {
    200: {
        message: string;
    };
};

export type PostApiV1AuthLogoutResponse =
    PostApiV1AuthLogoutResponses[keyof PostApiV1AuthLogoutResponses];

export type GetApiV1UsersData = {
    body?: never;
    path?: never;
    query: {
        limit: number;
        offset: number;
    };
    url: "/api/v1/users/";
};

export type GetApiV1UsersErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1UsersError = GetApiV1UsersErrors[keyof GetApiV1UsersErrors];

export type GetApiV1UsersResponses = {
    200: {
        data: Array<{
            id: string;
            email: string;
            emailVerified: boolean;
            firstName: string | null;
            lastName: string | null;
            role: number;
            isActive: boolean;
            createdAt: unknown | string | number;
            updatedAt: unknown | string | number;
            deletedAt: (unknown | string | number) | null;
        }>;
        pagination: {
            total: number;
            limit: number;
            offset: number;
        };
    };
};

export type GetApiV1UsersResponse =
    GetApiV1UsersResponses[keyof GetApiV1UsersResponses];

export type PostApiV1UsersData = {
    body: {
        email: string;
        emailVerified?: boolean;
        password: string;
        firstName?: string;
        lastName?: string;
        isActive?: boolean;
        role: string | number;
    };
    path?: never;
    query?: never;
    url: "/api/v1/users/";
};

export type PostApiV1UsersErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1UsersError =
    PostApiV1UsersErrors[keyof PostApiV1UsersErrors];

export type PostApiV1UsersResponses = {
    201: {
        id: string;
        email: string;
        emailVerified: boolean;
        firstName: string | null;
        lastName: string | null;
        role: number;
        isActive: boolean;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
    };
};

export type PostApiV1UsersResponse =
    PostApiV1UsersResponses[keyof PostApiV1UsersResponses];

export type DeleteApiV1UsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/users/{id}";
};

export type DeleteApiV1UsersByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1UsersByIdError =
    DeleteApiV1UsersByIdErrors[keyof DeleteApiV1UsersByIdErrors];

export type DeleteApiV1UsersByIdResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1UsersByIdResponse =
    DeleteApiV1UsersByIdResponses[keyof DeleteApiV1UsersByIdResponses];

export type GetApiV1UsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/users/{id}";
};

export type GetApiV1UsersByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1UsersByIdError =
    GetApiV1UsersByIdErrors[keyof GetApiV1UsersByIdErrors];

export type GetApiV1UsersByIdResponses = {
    200: {
        id: string;
        email: string;
        emailVerified: boolean;
        firstName: string | null;
        lastName: string | null;
        role: number;
        isActive: boolean;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
    };
};

export type GetApiV1UsersByIdResponse =
    GetApiV1UsersByIdResponses[keyof GetApiV1UsersByIdResponses];

export type PatchApiV1UsersByIdData = {
    body: {
        email?: string;
        emailVerified?: boolean;
        password?: string;
        firstName?: string;
        lastName?: string;
        isActive?: boolean;
        role?: string | number;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/users/{id}";
};

export type PatchApiV1UsersByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1UsersByIdError =
    PatchApiV1UsersByIdErrors[keyof PatchApiV1UsersByIdErrors];

export type PatchApiV1UsersByIdResponses = {
    200: {
        id: string;
        email: string;
        emailVerified: boolean;
        firstName: string | null;
        lastName: string | null;
        role: number;
        isActive: boolean;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
    };
};

export type PatchApiV1UsersByIdResponse =
    PatchApiV1UsersByIdResponses[keyof PatchApiV1UsersByIdResponses];

export type GetApiV1UsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/users/me";
};

export type GetApiV1UsersMeErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1UsersMeError =
    GetApiV1UsersMeErrors[keyof GetApiV1UsersMeErrors];

export type GetApiV1UsersMeResponses = {
    200: {
        id: string;
        email: string;
        emailVerified: boolean;
        firstName: string | null;
        lastName: string | null;
        role: number;
        isActive: boolean;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
    };
};

export type GetApiV1UsersMeResponse =
    GetApiV1UsersMeResponses[keyof GetApiV1UsersMeResponses];

export type PatchApiV1UsersMeData = {
    body: {
        firstName?: string;
        lastName?: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/users/me";
};

export type PatchApiV1UsersMeErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1UsersMeError =
    PatchApiV1UsersMeErrors[keyof PatchApiV1UsersMeErrors];

export type PatchApiV1UsersMeResponses = {
    200: {
        id: string;
        email: string;
        emailVerified: boolean;
        firstName: string | null;
        lastName: string | null;
        role: number;
        isActive: boolean;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
    };
};

export type PatchApiV1UsersMeResponse =
    PatchApiV1UsersMeResponses[keyof PatchApiV1UsersMeResponses];

export type PatchApiV1UsersMePasswordData = {
    body: {
        currentPassword: string;
        newPassword: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/users/me/password";
};

export type PatchApiV1UsersMePasswordErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1UsersMePasswordError =
    PatchApiV1UsersMePasswordErrors[keyof PatchApiV1UsersMePasswordErrors];

export type PatchApiV1UsersMePasswordResponses = {
    200: {
        message: string;
    };
};

export type PatchApiV1UsersMePasswordResponse =
    PatchApiV1UsersMePasswordResponses[keyof PatchApiV1UsersMePasswordResponses];

export type PostApiV1UsersSignupData = {
    body: {
        email: string;
        password: string;
        firstName?: string;
        lastName?: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/users/signup";
};

export type PostApiV1UsersSignupErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1UsersSignupError =
    PostApiV1UsersSignupErrors[keyof PostApiV1UsersSignupErrors];

export type PostApiV1UsersSignupResponses = {
    201: {
        message: string;
    };
};

export type PostApiV1UsersSignupResponse =
    PostApiV1UsersSignupResponses[keyof PostApiV1UsersSignupResponses];

export type GetApiV1CategoriesData = {
    body?: never;
    path?: never;
    query: {
        limit: number;
        offset: number;
    };
    url: "/api/v1/categories/";
};

export type GetApiV1CategoriesErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1CategoriesError =
    GetApiV1CategoriesErrors[keyof GetApiV1CategoriesErrors];

export type GetApiV1CategoriesResponses = {
    200: {
        data: Array<{
            id: string;
            name: string;
            createdAt: unknown | string | number;
            updatedAt: unknown | string | number;
        }>;
        pagination: {
            total: number;
            limit: number;
            offset: number;
        };
    };
};

export type GetApiV1CategoriesResponse =
    GetApiV1CategoriesResponses[keyof GetApiV1CategoriesResponses];

export type PostApiV1CategoriesData = {
    body: {
        name: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/categories/";
};

export type PostApiV1CategoriesErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1CategoriesError =
    PostApiV1CategoriesErrors[keyof PostApiV1CategoriesErrors];

export type PostApiV1CategoriesResponses = {
    201: {
        id: string;
        name: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type PostApiV1CategoriesResponse =
    PostApiV1CategoriesResponses[keyof PostApiV1CategoriesResponses];

export type DeleteApiV1CategoriesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/categories/{id}";
};

export type DeleteApiV1CategoriesByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1CategoriesByIdError =
    DeleteApiV1CategoriesByIdErrors[keyof DeleteApiV1CategoriesByIdErrors];

export type DeleteApiV1CategoriesByIdResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1CategoriesByIdResponse =
    DeleteApiV1CategoriesByIdResponses[keyof DeleteApiV1CategoriesByIdResponses];

export type GetApiV1CategoriesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/categories/{id}";
};

export type GetApiV1CategoriesByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1CategoriesByIdError =
    GetApiV1CategoriesByIdErrors[keyof GetApiV1CategoriesByIdErrors];

export type GetApiV1CategoriesByIdResponses = {
    200: {
        id: string;
        name: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type GetApiV1CategoriesByIdResponse =
    GetApiV1CategoriesByIdResponses[keyof GetApiV1CategoriesByIdResponses];

export type PatchApiV1CategoriesByIdData = {
    body: {
        name?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/categories/{id}";
};

export type PatchApiV1CategoriesByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1CategoriesByIdError =
    PatchApiV1CategoriesByIdErrors[keyof PatchApiV1CategoriesByIdErrors];

export type PatchApiV1CategoriesByIdResponses = {
    200: {
        id: string;
        name: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type PatchApiV1CategoriesByIdResponse =
    PatchApiV1CategoriesByIdResponses[keyof PatchApiV1CategoriesByIdResponses];

export type GetApiV1RoomsData = {
    body?: never;
    path?: never;
    query: {
        limit: number;
        offset: number;
    };
    url: "/api/v1/rooms/";
};

export type GetApiV1RoomsErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1RoomsError = GetApiV1RoomsErrors[keyof GetApiV1RoomsErrors];

export type GetApiV1RoomsResponses = {
    200: {
        data: Array<{
            id: string;
            roomNumber: string;
            createdAt: unknown | string | number;
            updatedAt: unknown | string | number;
        }>;
        pagination: {
            total: number;
            limit: number;
            offset: number;
        };
    };
};

export type GetApiV1RoomsResponse =
    GetApiV1RoomsResponses[keyof GetApiV1RoomsResponses];

export type PostApiV1RoomsData = {
    body: {
        roomNumber: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/rooms/";
};

export type PostApiV1RoomsErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1RoomsError =
    PostApiV1RoomsErrors[keyof PostApiV1RoomsErrors];

export type PostApiV1RoomsResponses = {
    201: {
        id: string;
        roomNumber: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type PostApiV1RoomsResponse =
    PostApiV1RoomsResponses[keyof PostApiV1RoomsResponses];

export type DeleteApiV1RoomsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/rooms/{id}";
};

export type DeleteApiV1RoomsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1RoomsByIdError =
    DeleteApiV1RoomsByIdErrors[keyof DeleteApiV1RoomsByIdErrors];

export type DeleteApiV1RoomsByIdResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1RoomsByIdResponse =
    DeleteApiV1RoomsByIdResponses[keyof DeleteApiV1RoomsByIdResponses];

export type GetApiV1RoomsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/rooms/{id}";
};

export type GetApiV1RoomsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1RoomsByIdError =
    GetApiV1RoomsByIdErrors[keyof GetApiV1RoomsByIdErrors];

export type GetApiV1RoomsByIdResponses = {
    200: {
        id: string;
        roomNumber: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type GetApiV1RoomsByIdResponse =
    GetApiV1RoomsByIdResponses[keyof GetApiV1RoomsByIdResponses];

export type PatchApiV1RoomsByIdData = {
    body: {
        roomNumber?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/rooms/{id}";
};

export type PatchApiV1RoomsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1RoomsByIdError =
    PatchApiV1RoomsByIdErrors[keyof PatchApiV1RoomsByIdErrors];

export type PatchApiV1RoomsByIdResponses = {
    200: {
        id: string;
        roomNumber: string;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
    };
};

export type PatchApiV1RoomsByIdResponse =
    PatchApiV1RoomsByIdResponses[keyof PatchApiV1RoomsByIdResponses];

export type GetApiV1EquipmentsData = {
    body?: never;
    path?: never;
    query: {
        limit: number;
        offset: number;
    };
    url: "/api/v1/equipments/";
};

export type GetApiV1EquipmentsErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1EquipmentsError =
    GetApiV1EquipmentsErrors[keyof GetApiV1EquipmentsErrors];

export type GetApiV1EquipmentsResponses = {
    200: {
        data: Array<{
            id: string;
            name: string;
            description: string | null;
            customId: string;
            price: unknown;
            lifetime: number;
            status: number;
            notes: string | null;
            createdAt: unknown | string | number;
            updatedAt: unknown | string | number;
            deletedAt: (unknown | string | number) | null;
            serialNumber: string | null;
            acquiredDate: unknown | string | number;
            acquisitionMethod: string;
            disposalDate: (unknown | string | number) | null;
            createdBy: string | null;
            creator?: {
                id: string;
                email: string;
                firstName: string | null;
                lastName: string | null;
            } | null;
            roomId: string | null;
            room?: {
                id: string;
                roomNumber: string;
            } | null;
            categoryId: string | null;
            category?: {
                id: string;
                name: string;
            } | null;
            images: Array<{
                id: string;
                filename: string;
                filepath: string;
                filesize: number;
                filetype: string;
                createdAt: unknown | string | number;
                equipmentId: string;
            }>;
            receiptImage: {
                id: string;
                filename: string;
                filepath: string;
                filesize: number;
                filetype: string;
                createdAt: unknown | string | number;
                equipmentId: string;
            } | null;
        }>;
        pagination: {
            total: number;
            limit: number;
            offset: number;
        };
    };
};

export type GetApiV1EquipmentsResponse =
    GetApiV1EquipmentsResponses[keyof GetApiV1EquipmentsResponses];

export type PostApiV1EquipmentsData = {
    body: {
        name: string;
        description?: string;
        lifetime: number;
        price: number;
        status: number;
        customId: string;
        acquiredDate: unknown | string | number;
        serialNumber?: string;
        acquisitionMethod: string;
        disposalDate?: unknown | string | number;
        notes?: string;
        roomId?: string;
        categoryId?: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/equipments/";
};

export type PostApiV1EquipmentsErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1EquipmentsError =
    PostApiV1EquipmentsErrors[keyof PostApiV1EquipmentsErrors];

export type PostApiV1EquipmentsResponses = {
    201: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type PostApiV1EquipmentsResponse =
    PostApiV1EquipmentsResponses[keyof PostApiV1EquipmentsResponses];

export type DeleteApiV1EquipmentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}";
};

export type DeleteApiV1EquipmentsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdError =
    DeleteApiV1EquipmentsByIdErrors[keyof DeleteApiV1EquipmentsByIdErrors];

export type DeleteApiV1EquipmentsByIdResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdResponse =
    DeleteApiV1EquipmentsByIdResponses[keyof DeleteApiV1EquipmentsByIdResponses];

export type GetApiV1EquipmentsByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}";
};

export type GetApiV1EquipmentsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type GetApiV1EquipmentsByIdError =
    GetApiV1EquipmentsByIdErrors[keyof GetApiV1EquipmentsByIdErrors];

export type GetApiV1EquipmentsByIdResponses = {
    200: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type GetApiV1EquipmentsByIdResponse =
    GetApiV1EquipmentsByIdResponses[keyof GetApiV1EquipmentsByIdResponses];

export type PatchApiV1EquipmentsByIdData = {
    body: {
        name?: string;
        description?: string;
        serialNumber?: string;
        acquisitionMethod?: string;
        disposalDate?: unknown | string | number;
        notes?: string;
        roomId?: string;
        categoryId?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}";
};

export type PatchApiV1EquipmentsByIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1EquipmentsByIdError =
    PatchApiV1EquipmentsByIdErrors[keyof PatchApiV1EquipmentsByIdErrors];

export type PatchApiV1EquipmentsByIdResponses = {
    200: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type PatchApiV1EquipmentsByIdResponse =
    PatchApiV1EquipmentsByIdResponses[keyof PatchApiV1EquipmentsByIdResponses];

export type PostApiV1EquipmentsByIdImagesData = {
    body: {
        file: Blob | File;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}/images";
};

export type PostApiV1EquipmentsByIdImagesErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1EquipmentsByIdImagesError =
    PostApiV1EquipmentsByIdImagesErrors[keyof PostApiV1EquipmentsByIdImagesErrors];

export type PostApiV1EquipmentsByIdImagesResponses = {
    200: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type PostApiV1EquipmentsByIdImagesResponse =
    PostApiV1EquipmentsByIdImagesResponses[keyof PostApiV1EquipmentsByIdImagesResponses];

export type DeleteApiV1EquipmentsByIdImagesByImageIdData = {
    body?: never;
    path: {
        id: string;
        imageId: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}/images/{imageId}";
};

export type DeleteApiV1EquipmentsByIdImagesByImageIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdImagesByImageIdError =
    DeleteApiV1EquipmentsByIdImagesByImageIdErrors[keyof DeleteApiV1EquipmentsByIdImagesByImageIdErrors];

export type DeleteApiV1EquipmentsByIdImagesByImageIdResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdImagesByImageIdResponse =
    DeleteApiV1EquipmentsByIdImagesByImageIdResponses[keyof DeleteApiV1EquipmentsByIdImagesByImageIdResponses];

export type PatchApiV1EquipmentsByIdImagesByImageIdData = {
    body: {
        file: Blob | File;
    };
    path: {
        id: string;
        imageId: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}/images/{imageId}";
};

export type PatchApiV1EquipmentsByIdImagesByImageIdErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PatchApiV1EquipmentsByIdImagesByImageIdError =
    PatchApiV1EquipmentsByIdImagesByImageIdErrors[keyof PatchApiV1EquipmentsByIdImagesByImageIdErrors];

export type PatchApiV1EquipmentsByIdImagesByImageIdResponses = {
    200: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type PatchApiV1EquipmentsByIdImagesByImageIdResponse =
    PatchApiV1EquipmentsByIdImagesByImageIdResponses[keyof PatchApiV1EquipmentsByIdImagesByImageIdResponses];

export type DeleteApiV1EquipmentsByIdReceiptData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}/receipt";
};

export type DeleteApiV1EquipmentsByIdReceiptErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdReceiptError =
    DeleteApiV1EquipmentsByIdReceiptErrors[keyof DeleteApiV1EquipmentsByIdReceiptErrors];

export type DeleteApiV1EquipmentsByIdReceiptResponses = {
    200: {
        message: string;
    };
};

export type DeleteApiV1EquipmentsByIdReceiptResponse =
    DeleteApiV1EquipmentsByIdReceiptResponses[keyof DeleteApiV1EquipmentsByIdReceiptResponses];

export type PostApiV1EquipmentsByIdReceiptData = {
    body: {
        file: Blob | File;
    };
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/equipments/{id}/receipt";
};

export type PostApiV1EquipmentsByIdReceiptErrors = {
    400: {
        message: string;
    };
    401: {
        message: string;
    };
    403: {
        message: string;
    };
    404: {
        message: string;
    };
    409: {
        message: string;
        error: string;
        field: string;
    };
    500: {
        message: string;
    };
};

export type PostApiV1EquipmentsByIdReceiptError =
    PostApiV1EquipmentsByIdReceiptErrors[keyof PostApiV1EquipmentsByIdReceiptErrors];

export type PostApiV1EquipmentsByIdReceiptResponses = {
    200: {
        id: string;
        name: string;
        description: string | null;
        customId: string;
        price: unknown;
        lifetime: number;
        status: number;
        notes: string | null;
        createdAt: unknown | string | number;
        updatedAt: unknown | string | number;
        deletedAt: (unknown | string | number) | null;
        serialNumber: string | null;
        acquiredDate: unknown | string | number;
        acquisitionMethod: string;
        disposalDate: (unknown | string | number) | null;
        createdBy: string | null;
        creator?: {
            id: string;
            email: string;
            firstName: string | null;
            lastName: string | null;
        } | null;
        roomId: string | null;
        room?: {
            id: string;
            roomNumber: string;
        } | null;
        categoryId: string | null;
        category?: {
            id: string;
            name: string;
        } | null;
        images: Array<{
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        }>;
        receiptImage: {
            id: string;
            filename: string;
            filepath: string;
            filesize: number;
            filetype: string;
            createdAt: unknown | string | number;
            equipmentId: string;
        } | null;
    };
};

export type PostApiV1EquipmentsByIdReceiptResponse =
    PostApiV1EquipmentsByIdReceiptResponses[keyof PostApiV1EquipmentsByIdReceiptResponses];

export type ClientOptions = {
    baseUrl: "http://localhost:8000" | (string & {});
};
